{"ast":null,"code":"import _objectSpread from \"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";\nimport _asyncToGenerator from \"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _slicedToArray from \"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMessage } from \"./useMessage\";\nimport { useLoginUser } from \"../hooks/providers/useLoginUserProvider\";\nexport var useAuth = function useAuth() {\n  _s();\n\n  var history = useHistory();\n\n  var _useMessage = useMessage(),\n      showMessage = _useMessage.showMessage;\n\n  var _useLoginUser = useLoginUser(),\n      setLoginUser = _useLoginUser.setLoginUser;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var login = useCallback(function (id) {\n    setLoading(true);\n    axios.get(\"https://jsonplaceholder.typicode.com/users/\".concat(id)).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(res) {\n        var isAdmin;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (res.data) {\n                  // contextにログインユーザーの情報を保存\n                  // サンプル的にidが10のユーザーを管理者としてみる\n                  isAdmin = res.data.id === 10 ? true : false;\n                  setLoginUser(_objectSpread(_objectSpread({}, res.data), {}, {\n                    isAdmin: isAdmin\n                  }));\n                  showMessage({\n                    title: \"ログインしました\",\n                    status: \"success\"\n                  });\n                  history.push(\"/home\");\n                } else {\n                  showMessage({\n                    title: \"ユーザーが見つかりません\",\n                    status: \"error\"\n                  });\n                  setLoading(false);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(function () {\n      showMessage({\n        title: \"ユーザーが見つかりません\",\n        status: \"error\"\n      });\n      setLoading(false);\n    });\n  }, []);\n  return {\n    login: login,\n    loading: loading\n  };\n};\n\n_s(useAuth, \"QiZ/6VIeVRjamz0IueqEqR/fRTM=\", false, function () {\n  return [useHistory, useMessage, useLoginUser];\n});","map":{"version":3,"sources":["C:/React/React-UserManegement/src/hooks/useAuth.ts"],"names":["useCallback","useState","axios","useHistory","useMessage","useLoginUser","useAuth","history","showMessage","setLoginUser","loading","setLoading","login","id","get","then","res","data","isAdmin","title","status","push","catch"],"mappings":";;;;;;;;AAAA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAC3B,MAAMC,OAAO,GAAGJ,UAAU,EAA1B;;AACA,oBAAwBC,UAAU,EAAlC;AAAA,MAAQI,WAAR,eAAQA,WAAR;;AACA,sBAAyBH,YAAY,EAArC;AAAA,MAAQI,YAAR,iBAAQA,YAAR;;AAEA,kBAA8BR,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOS,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,KAAK,GAAGZ,WAAW,CAAC,UAACa,EAAD,EAAgB;AACxCF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAT,IAAAA,KAAK,CACFY,GADH,sDAC2DD,EAD3D,GAEGE,IAFH;AAAA,0EAEQ,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,oBAAIA,GAAG,CAACC,IAAR,EAAc;AACZ;AACA;AACMC,kBAAAA,OAHM,GAGIF,GAAG,CAACC,IAAJ,CAASJ,EAAT,KAAgB,EAAhB,GAAqB,IAArB,GAA4B,KAHhC;AAIZJ,kBAAAA,YAAY,iCAAMO,GAAG,CAACC,IAAV;AAAgBC,oBAAAA,OAAO,EAAPA;AAAhB,qBAAZ;AACAV,kBAAAA,WAAW,CAAC;AAAEW,oBAAAA,KAAK,EAAE,UAAT;AAAqBC,oBAAAA,MAAM,EAAE;AAA7B,mBAAD,CAAX;AACAb,kBAAAA,OAAO,CAACc,IAAR,CAAa,OAAb;AACD,iBAPD,MAOO;AACLb,kBAAAA,WAAW,CAAC;AAAEW,oBAAAA,KAAK,EAAE,cAAT;AAAyBC,oBAAAA,MAAM,EAAE;AAAjC,mBAAD,CAAX;AACAT,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAXG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFR;;AAAA;AAAA;AAAA;AAAA,SAeGW,KAfH,CAeS,YAAM;AACXd,MAAAA,WAAW,CAAC;AAAEW,QAAAA,KAAK,EAAE,cAAT;AAAyBC,QAAAA,MAAM,EAAE;AAAjC,OAAD,CAAX;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAlBH;AAmBD,GArBwB,EAqBtB,EArBsB,CAAzB;AAuBA,SAAO;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASF,IAAAA,OAAO,EAAPA;AAAT,GAAP;AACD,CA/BM;;GAAMJ,O;UACKH,U,EACQC,U,EACCC,Y","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { User } from \"../types/api/user\";\nimport { useMessage } from \"./useMessage\";\nimport { useLoginUser } from \"../hooks/providers/useLoginUserProvider\";\n\nexport const useAuth = () => {\n  const history = useHistory();\n  const { showMessage } = useMessage();\n  const { setLoginUser } = useLoginUser();\n\n  const [loading, setLoading] = useState(false);\n\n  const login = useCallback((id: string) => {\n    setLoading(true);\n    axios\n      .get<User>(`https://jsonplaceholder.typicode.com/users/${id}`)\n      .then(async res => {\n        if (res.data) {\n          // contextにログインユーザーの情報を保存\n          // サンプル的にidが10のユーザーを管理者としてみる\n          const isAdmin = res.data.id === 10 ? true : false;\n          setLoginUser({ ...res.data, isAdmin });\n          showMessage({ title: \"ログインしました\", status: \"success\" });\n          history.push(\"/home\");\n        } else {\n          showMessage({ title: \"ユーザーが見つかりません\", status: \"error\" });\n          setLoading(false);\n        }\n      })\n      .catch(() => {\n        showMessage({ title: \"ユーザーが見つかりません\", status: \"error\" });\n        setLoading(false);\n      });\n  }, []);\n\n  return { login, loading };\n};\n"]},"metadata":{},"sourceType":"module"}