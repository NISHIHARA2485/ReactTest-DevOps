{"ast":null,"code":"import _slicedToArray from\"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{createContext,useContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var LoginUserContext=/*#__PURE__*/createContext({});// ログインユーザー情報を保持するcontext\nexport var LoginUserProvider=function LoginUserProvider(props){var children=props.children;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),loginUser=_useState2[0],setLoginUser=_useState2[1];return/*#__PURE__*/_jsx(LoginUserContext.Provider,{value:{loginUser:loginUser,setLoginUser:setLoginUser},children:children});};export var useLoginUser=function useLoginUser(){return useContext(LoginUserContext);};","map":{"version":3,"sources":["C:/React/React-UserManegement/src/hooks/providers/useLoginUserProvider.tsx"],"names":["React","createContext","useContext","useState","LoginUserContext","LoginUserProvider","props","children","loginUser","setLoginUser","useLoginUser"],"mappings":"2HAAA,MAAOA,CAAAA,KAAP,EACEC,aADF,CAKEC,UALF,CAMEC,QANF,KAOO,OAPP,C,2CAkBA,GAAMC,CAAAA,gBAAgB,cAAGH,aAAa,CACpC,EADoC,CAAtC,CAIA;AACA,MAAO,IAAMI,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAoC,CACnE,GAAQC,CAAAA,QAAR,CAAqBD,KAArB,CAAQC,QAAR,CACA,cAAkCJ,QAAQ,CAAmB,IAAnB,CAA1C,wCAAOK,SAAP,eAAkBC,YAAlB,eAEA,mBACE,KAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAE,CAAED,SAAS,CAATA,SAAF,CAAaC,YAAY,CAAZA,YAAb,CAAlC,UACGF,QADH,EADF,CAKD,CATM,CAWP,MAAO,IAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAC1BR,CAAAA,UAAU,CAACE,gBAAD,CADgB,EAArB","sourcesContent":["import React, {\n  createContext,\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  useContext,\n  useState\n} from \"react\";\n\nimport { User } from \"../../types/api/user\";\n\ntype LoginUser = User & { isAdmin: boolean };\n\ntype LoginUserContextType = {\n  loginUser: LoginUser | null;\n  setLoginUser: Dispatch<SetStateAction<LoginUser | null>>;\n};\n\nconst LoginUserContext = createContext<LoginUserContextType>(\n  {} as LoginUserContextType\n);\n\n// ログインユーザー情報を保持するcontext\nexport const LoginUserProvider = (props: { children: ReactNode }) => {\n  const { children } = props;\n  const [loginUser, setLoginUser] = useState<LoginUser | null>(null);\n\n  return (\n    <LoginUserContext.Provider value={{ loginUser, setLoginUser }}>\n      {children}\n    </LoginUserContext.Provider>\n  );\n};\n\nexport const useLoginUser = (): LoginUserContextType =>\n  useContext(LoginUserContext);\n"]},"metadata":{},"sourceType":"module"}