{"ast":null,"code":"import _slicedToArray from \"C:\\\\React\\\\React-UserManegement\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from \"react\";\nimport { useMessage } from \"./useMessage\";\n// 選択したユーザー情報を特定しモーダルを表示するカスタムフック\nexport var useSelectUser = function useSelectUser() {\n  _s();\n\n  var _useMessage = useMessage(),\n      showMessage = _useMessage.showMessage;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedUser = _useState2[0],\n      setSelectedUser = _useState2[1];\n\n  var onSelectUser = useCallback(function (props) {\n    var id = props.id,\n        users = props.users,\n        onOpen = props.onOpen;\n    var targetUser = users.find(function (obj) {\n      return obj.id === id;\n    });\n\n    if (!targetUser) {\n      showMessage({\n        title: \"ユーザーが見つかりません\",\n        status: \"error\"\n      });\n      return;\n    } else {\n      setSelectedUser(targetUser);\n      onOpen();\n    }\n  }, []);\n  return {\n    onSelectUser: onSelectUser,\n    selectedUser: selectedUser\n  };\n};\n\n_s(useSelectUser, \"vpVHaDXrTsqQros5n/aEOkQ1vmY=\", false, function () {\n  return [useMessage];\n});","map":{"version":3,"sources":["C:/React/React-UserManegement/src/hooks/useSelectUser.ts"],"names":["useCallback","useState","useMessage","useSelectUser","showMessage","selectedUser","setSelectedUser","onSelectUser","props","id","users","onOpen","targetUser","find","obj","title","status"],"mappings":";;;;AAAA;AACA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAQA;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AACjC,oBAAwBD,UAAU,EAAlC;AAAA,MAAQE,WAAR,eAAQA,WAAR;;AAEA,kBAAwCH,QAAQ,EAAhD;AAAA;AAAA,MAAOI,YAAP;AAAA,MAAqBC,eAArB;;AAEA,MAAMC,YAAY,GAAGP,WAAW,CAAC,UAACQ,KAAD,EAAkB;AACjD,QAAQC,EAAR,GAA8BD,KAA9B,CAAQC,EAAR;AAAA,QAAYC,KAAZ,GAA8BF,KAA9B,CAAYE,KAAZ;AAAA,QAAmBC,MAAnB,GAA8BH,KAA9B,CAAmBG,MAAnB;AACA,QAAMC,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAW,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACL,EAAJ,KAAWA,EAAf;AAAA,KAAd,CAAnB;;AACA,QAAI,CAACG,UAAL,EAAiB;AACfR,MAAAA,WAAW,CAAC;AAAEW,QAAAA,KAAK,EAAE,cAAT;AAAyBC,QAAAA,MAAM,EAAE;AAAjC,OAAD,CAAX;AACA;AACD,KAHD,MAGO;AACLV,MAAAA,eAAe,CAACM,UAAD,CAAf;AACAD,MAAAA,MAAM;AACP;AACF,GAV+B,EAU7B,EAV6B,CAAhC;AAWA,SAAO;AAAEJ,IAAAA,YAAY,EAAZA,YAAF;AAAgBF,IAAAA,YAAY,EAAZA;AAAhB,GAAP;AACD,CAjBM;;GAAMF,a;UACaD,U","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useCallback, useState } from \"react\";\n\nimport { User } from \"../types/api/user\";\nimport { useMessage } from \"./useMessage\";\n\ntype Props = {\n  id: number;\n  users: Array<User>;\n  onOpen: () => void;\n};\n\n// 選択したユーザー情報を特定しモーダルを表示するカスタムフック\nexport const useSelectUser = () => {\n  const { showMessage } = useMessage();\n\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  const onSelectUser = useCallback((props: Props) => {\n    const { id, users, onOpen } = props;\n    const targetUser = users.find(obj => obj.id === id);\n    if (!targetUser) {\n      showMessage({ title: \"ユーザーが見つかりません\", status: \"error\" });\n      return;\n    } else {\n      setSelectedUser(targetUser);\n      onOpen();\n    }\n  }, []);\n  return { onSelectUser, selectedUser };\n};\n"]},"metadata":{},"sourceType":"module"}